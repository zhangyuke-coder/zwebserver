cmake_minimum_required(VERSION 3.22.1)

project(ZWS C CXX)
ENABLE_LANGUAGE(ASM)
enable_testing()

# if(NOT CMAKE_BUILD_TYPE)
#   set(CMAKE_BUILD_TYPE "Release")
# endif()

# # only build examples if this is the main project
# if(CMAKE_PROJECT_NAME STREQUAL "muduo")
#   option(MUDUO_BUILD_EXAMPLES "Build Muduo examples" ON)
# endif()
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CXX_FLAGS
 -g
 # -DVALGRIND
 -DCHECK_PTHREAD_RETURN_VALUE
 -D_FILE_OFFSET_BITS=64
#  -Wall
 -Wextra
#  -Werror
#  -Wconversion
 -Wno-unused-parameter
#  -Wold-style-cast
 -Woverloaded-virtual
 -Wpointer-arith
#  -Wshadow
 -Wwrite-strings
 -march=native
 # -MMD
 -std=c++17
 -rdynamic
 -Wno-implicit-fallthrough
 )
# if(CMAKE_BUILD_BITS EQUAL 32)
#   list(APPEND CXX_FLAGS "-m32")
# endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  list(APPEND CXX_FLAGS "-Wno-null-dereference")
  list(APPEND CXX_FLAGS "-Wno-sign-conversion")
  list(APPEND CXX_FLAGS "-Wno-unused-local-typedef")
  list(APPEND CXX_FLAGS "-Wthread-safety")
  list(REMOVE_ITEM CXX_FLAGS "-rdynamic")
endif()
string(REPLACE ";" " " CMAKE_CXX_FLAGS "${CXX_FLAGS}")

set(CMAKE_CXX_FLAGS_DEBUG "-O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

# find_package(Boost REQUIRED)
# find_package(Protobuf)
# find_package(CURL)
# find_package(ZLIB)
# find_path(CARES_INCLUDE_DIR ares.h)
# find_library(CARES_LIBRARY NAMES cares)
# find_path(MHD_INCLUDE_DIR microhttpd.h)
# find_library(MHD_LIBRARY NAMES microhttpd)
# find_library(BOOSTTEST_LIBRARY NAMES boost_unit_test_framework)
# find_library(BOOSTPO_LIBRARY NAMES boost_program_options)
# find_library(BOOSTSYSTEM_LIBRARY NAMES boost_system)
# find_path(TCMALLOC_INCLUDE_DIR gperftools/heap-profiler.h)
# find_library(TCMALLOC_LIBRARY NAMES tcmalloc_and_profiler)
# find_path(HIREDIS_INCLUDE_DIR hiredis/hiredis.h)
# find_library(HIREDIS_LIBRARY NAMES hiredis)
# find_path(GD_INCLUDE_DIR gd.h)
# find_library(GD_LIBRARY NAMES gd)
# find_program(THRIFT_COMPILER thrift)
# find_path(THRIFT_INCLUDE_DIR thrift)
# find_library(THRIFT_LIBRARY NAMES thrift)

# if(CARES_INCLUDE_DIR AND CARES_LIBRARY)
#   message(STATUS "found cares")
# endif()
# if(CURL_FOUND)
#   message(STATUS "found curl")
# endif()
# if(PROTOBUF_FOUND)
#   message(STATUS "found protobuf")
# endif()
# if(TCMALLOC_INCLUDE_DIR AND TCMALLOC_LIBRARY)
#   message(STATUS "found tcmalloc")
# endif()
# if(ZLIB_FOUND)
#   message(STATUS "found zlib")
# endif()
# if(HIREDIS_INCLUDE_DIR AND HIREDIS_LIBRARY)
#   message(STATUS "found hiredis")
# endif()
# if(GD_INCLUDE_DIR AND GD_LIBRARY)
#   message(STATUS "found gd")
# endif()
# if(THRIFT_COMPILER AND THRIFT_INCLUDE_DIR AND THRIFT_LIBRARY)
#   message(STATUS "found thrift")
# endif()

# include_directories(${Boost_INCLUDE_DIRS})

# include_directories(${PROJECT_SOURCE_DIR})

# string(TOUPPER ${CMAKE_BUILD_TYPE} BUILD_TYPE)


# 查找 GTest 库
find_package(GTest REQUIRED)
# GTest 的头文件
include_directories(${GTEST_INCLUDE_DIRS})

include_directories(${PROJECT_SOURCE_DIR})
# link_libraries(/usr/local/lib/libprotobuf.a)
# link_libraries(/usr/lib/libtinyxml.a)
message(STATUS "CXX_FLAGS = " ${CMAKE_CXX_FLAGS} " " ${CMAKE_CXX_FLAGS_${BUILD_TYPE}})

add_subdirectory(src)
add_subdirectory(tests)